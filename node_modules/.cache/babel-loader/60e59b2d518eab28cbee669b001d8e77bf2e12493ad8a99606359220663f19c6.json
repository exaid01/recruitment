{"ast":null,"code":"export default {\n  name: 'ForumPage',\n  data() {\n    return {\n      activeIndex: '5',\n      postContent: '',\n      commentContent: {},\n      posts: []\n    };\n  },\n  mounted() {\n    // 组件挂载时加载最新动态\n    this.loadPosts();\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn || true; // 模拟登录状态\n    },\n    currentUser() {\n      return this.$store.getters.currentUser || {\n        username: '当前用户',\n        role: 1\n      }; // 模拟用户数据\n    }\n  },\n  methods: {\n    // 加载最新动态\n    loadPosts() {\n      this.$axios.get('/forum/posts').then(({\n        data\n      }) => {\n        // 确保posts数据正确，并且每个post都有comments数组\n        this.posts = data.map(post => ({\n          ...post,\n          comments: post.comments || []\n        }));\n        console.log('加载的帖子数据:', this.posts);\n      }).catch(error => {\n        console.error('加载动态失败:', error);\n        console.error('错误详情:', error.response ? error.response.data : '无响应数据');\n        this.$message.error(`加载动态失败: ${error.response ? error.response.data.message || '服务器内部错误' : '网络连接问题'}`);\n      });\n    },\n    // 新增方法：专门加载特定帖子的评论\n    loadComments(postId) {\n      this.$axios.get(`/forum/posts/${postId}/comments`).then(({\n        data\n      }) => {\n        console.log(`加载的帖子${postId}评论数据:`, data);\n        const post = this.posts.find(p => p.id === postId);\n        if (post) {\n          post.comments = data;\n        }\n      }).catch(error => {\n        console.error(`加载帖子${postId}评论失败:`, error);\n      });\n    },\n    handleSelect(key) {\n      switch (key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          if (this.$route.path !== '/forum') {\n            this.$router.push('/forum');\n          }\n          break;\n        case '6':\n          this.$router.push('/login');\n          break;\n        case '7':\n          this.$router.push('/register');\n          break;\n        case '8-1':\n          this.$router.push('/user');\n          break;\n        case '8-2':\n          this.$router.push('/admin');\n          break;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    toggleLike(postId) {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        // 先更新本地状态\n        const newLikedState = !post.liked;\n        const likeChange = newLikedState ? 1 : -1;\n        post.liked = newLikedState;\n        post.likesCount += likeChange;\n\n        // 调用后端API同步点赞状态\n        this.$axios.post(`/forum/posts/${postId}/like`, {\n          liked: newLikedState\n        }).catch(error => {\n          console.error('更新点赞状态失败:', error);\n          // 失败时回滚本地状态\n          post.liked = !newLikedState;\n          post.likesCount -= likeChange;\n          this.$message.error('更新点赞状态失败，请重试');\n        });\n      }\n    },\n    toggleComment(postId) {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        post.showComments = !post.showComments;\n        // 初始化评论输入框，使用$set确保响应式\n        if (!this.commentContent[postId]) {\n          this.$set(this.commentContent, postId, '');\n        }\n        // 显示评论时加载最新评论数据\n        if (post.showComments) {\n          this.loadComments(postId);\n        }\n      }\n    },\n    addComment(postId) {\n      // 确保commentContent[postId]已初始化，使用$set确保响应式\n      if (!this.commentContent[postId]) {\n        this.$set(this.commentContent, postId, '');\n      }\n      const content = this.commentContent[postId];\n      if (!content.trim()) {\n        this.$message.warning('评论内容不能为空');\n        return;\n      }\n\n      // 确保currentUser有id属性\n      if (!this.currentUser.id) {\n        console.error('用户ID不存在，无法添加评论');\n        this.$message.error('用户信息不完整，请重新登录');\n        return;\n      }\n\n      // 调用后端API添加评论，包含用户ID\n      this.$axios.post(`/forum/posts/${postId}/comments`, {\n        content,\n        userId: this.currentUser.id\n      }).then(({\n        data\n      }) => {\n        // 成功后更新本地评论列表\n        console.log('后端返回的评论数据:', data);\n        const post = this.posts.find(p => p.id === postId);\n        if (post) {\n          if (!post.comments) {\n            post.comments = [];\n          }\n          // 检查是否有重复ID的评论\n          const hasDuplicate = post.comments.some(comment => comment.id === data.id);\n          if (hasDuplicate) {\n            console.warn('发现重复ID的评论:', data.id);\n          }\n          // 使用后端返回的评论数据\n          post.comments.push(data);\n          this.commentContent[postId] = '';\n          this.$message.success('评论成功');\n        }\n      }).catch(error => {\n        console.error('添加评论失败:', error);\n        this.$message.error('添加评论失败，请重试');\n      });\n    },\n    // 发布新动态\n    createPost() {\n      console.log('当前用户信息:', this.currentUser);\n      console.log('用户ID:', this.currentUser.id);\n      if (!this.currentUser || !this.currentUser.id) {\n        console.error('用户未登录或用户信息不完整');\n        this.$message.error('请先登录');\n        return;\n      }\n      if (!this.postContent.trim()) {\n        this.$message.warning('动态内容不能为空');\n        return;\n      }\n      const postData = {\n        content: this.postContent,\n        userId: this.currentUser.id\n      };\n      console.log('发送的请求数据:', postData);\n      this.$axios.post('/forum/posts', postData).then(() => {\n        // 成功发布后，重新加载动态列表\n        this.loadPosts();\n        this.postContent = '';\n        this.$message.success('发布成功');\n      }).catch(error => {\n        console.error('发布动态失败:', error);\n        console.error('错误详情:', error.response ? error.response.data : '无响应数据');\n        this.$message.error(`发布动态失败: ${error.response ? error.response.data.message || '服务器内部错误' : '网络连接问题'}`);\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","activeIndex","postContent","commentContent","posts","mounted","loadPosts","computed","isLoggedIn","$store","getters","currentUser","username","role","methods","$axios","get","then","map","post","comments","console","log","catch","error","response","$message","message","loadComments","postId","find","p","id","handleSelect","key","$router","push","$route","path","logout","dispatch","success","toggleLike","newLikedState","liked","likeChange","likesCount","toggleComment","showComments","$set","addComment","content","trim","warning","userId","hasDuplicate","some","comment","warn","createPost","postData"],"sources":["src/views/Forum.vue"],"sourcesContent":["<template>\n  <div class=\"forum-container\">\n    <!-- 导航栏 -->\n    <el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\n      <el-menu-item index=\"1\">首页</el-menu-item>\n      <el-menu-item index=\"2\">职位</el-menu-item>\n      <el-menu-item index=\"3\">企业</el-menu-item>\n      <el-menu-item index=\"4\">消息</el-menu-item>\n      <el-menu-item index=\"5\">论坛</el-menu-item>\n      <el-menu-item index=\"6\" v-if=\"!isLoggedIn\">登录</el-menu-item>\n      <el-menu-item index=\"7\" v-if=\"!isLoggedIn\">注册</el-menu-item>\n      <el-submenu index=\"8\" v-if=\"isLoggedIn\">\n        <template slot=\"title\">{{ currentUser.username }}</template>\n        <el-menu-item index=\"8-1\">个人中心</el-menu-item>\n        <el-menu-item index=\"8-2\" v-if=\"currentUser.role === 2\">管理员面板</el-menu-item>\n        <el-menu-item index=\"8-3\" @click=\"logout\">退出登录</el-menu-item>\n      </el-submenu>\n    </el-menu>\n\n    <div class=\"forum-content\">\n      <!-- 发布动态区域 -->\n      <div class=\"post-create\">\n        <el-card>\n          <div slot=\"header\" class=\"clearfix\">\n            <span>发布动态</span>\n          </div>\n          <div class=\"post-form\">\n            <el-input\n              v-model=\"postContent\"\n              type=\"textarea\"\n              placeholder=\"分享你的求职经验、面试技巧或职场感悟...\"\n              :rows=\"4\"\n            ></el-input>\n            <div class=\"post-actions\">\n              <el-button type=\"primary\" @click=\"createPost\">发布</el-button>\n            </div>\n          </div>\n        </el-card>\n      </div>\n\n      <!-- 动态列表 -->\n      <div class=\"posts-list\">\n        <h3>最新动态</h3>\n        <el-card v-for=\"post in posts\" :key=\"post.id\" class=\"post-card\">\n          <div class=\"post-header\">\n            <img :src=\"post.userAvatar\" alt=\"用户头像\" class=\"user-avatar\">\n            <div class=\"user-info\">\n              <div class=\"username\">{{ post.username }}</div>\n              <div class=\"post-time\">{{ post.time }}</div>\n            </div>\n          </div>\n          <div class=\"post-content\">\n            {{ post.content }}\n          </div>\n          <div class=\"post-actions\">\n            <div class=\"action-item\" @click=\"toggleLike(post.id)\">\n              <i :class=\"{ 'el-icon-heart': !post.liked, 'el-icon-heart-on': post.liked }\" :style=\"{ color: post.liked ? '#ff4d4f' : '' }\"></i>\n              <span>{{ post.likesCount }}</span>\n            </div>\n            <div class=\"action-item\" @click=\"toggleComment(post.id)\">\n              <i class=\"el-icon-chat-dot-round\"></i>\n              <span>{{ (post.comments || []).length }}</span>\n            </div>\n          </div>\n          <!-- 评论区域 -->\n          <div class=\"comments-section\" v-if=\"post.showComments\">\n            <div v-for=\"comment in (post.comments || [])\" :key=\"comment.id\" class=\"comment-item\">\n              <img :src=\"comment.userAvatar\" alt=\"评论用户头像\" class=\"comment-avatar\">\n              <div class=\"comment-content\">\n                <div class=\"comment-header\">\n                  <span class=\"comment-username\">{{ comment.username }}</span>\n                  <span class=\"comment-time\">{{ comment.time }}</span>\n                </div>\n                <div class=\"comment-text\">{{ comment.content }}</div>\n              </div>\n            </div>\n            <div class=\"add-comment\">\n              <el-input\n                v-model=\"commentContent[post.id]\"\n                placeholder=\"添加评论...\"\n                @keyup.enter.native=\"addComment(post.id)\"\n              ></el-input>\n              <el-button size=\"small\" type=\"primary\" @click=\"addComment(post.id)\">发送</el-button>\n            </div>\n          </div>\n        </el-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ForumPage',\n  data() {\n    return {\n      activeIndex: '5',\n      postContent: '',\n      commentContent: {},\n      posts: []\n    };\n  },\n  mounted() {\n    // 组件挂载时加载最新动态\n    this.loadPosts();\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn || true; // 模拟登录状态\n    },\n    currentUser() {\n      return this.$store.getters.currentUser || { username: '当前用户', role: 1 }; // 模拟用户数据\n    }\n  },\n  methods: {\n    // 加载最新动态\n    loadPosts() {\n      this.$axios.get('/forum/posts')\n        .then(({ data }) => {\n          // 确保posts数据正确，并且每个post都有comments数组\n          this.posts = data.map(post => ({\n            ...post,\n            comments: post.comments || []\n          }));\n          console.log('加载的帖子数据:', this.posts);\n        })\n        .catch(error => {\n          console.error('加载动态失败:', error);\n          console.error('错误详情:', error.response ? error.response.data : '无响应数据');\n          this.$message.error(`加载动态失败: ${error.response ? error.response.data.message || '服务器内部错误' : '网络连接问题'}`);\n        });\n    },\n    // 新增方法：专门加载特定帖子的评论\n    loadComments(postId) {\n      this.$axios.get(`/forum/posts/${postId}/comments`)\n        .then(({ data }) => {\n          console.log(`加载的帖子${postId}评论数据:`, data);\n          const post = this.posts.find(p => p.id === postId);\n          if (post) {\n            post.comments = data;\n          }\n        })\n        .catch(error => {\n          console.error(`加载帖子${postId}评论失败:`, error);\n        });\n    },\n    handleSelect(key) {\n      switch(key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          if (this.$route.path !== '/forum') {\n            this.$router.push('/forum');\n          }\n          break;\n        case '6':\n          this.$router.push('/login');\n          break;\n        case '7':\n          this.$router.push('/register');\n          break;\n        case '8-1':\n          this.$router.push('/user');\n          break;\n        case '8-2':\n          this.$router.push('/admin');\n          break;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    toggleLike(postId) {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        // 先更新本地状态\n        const newLikedState = !post.liked;\n        const likeChange = newLikedState ? 1 : -1;\n        post.liked = newLikedState;\n        post.likesCount += likeChange;\n\n        // 调用后端API同步点赞状态\n        this.$axios.post(`/forum/posts/${postId}/like`, { liked: newLikedState })\n          .catch(error => {\n            console.error('更新点赞状态失败:', error);\n            // 失败时回滚本地状态\n            post.liked = !newLikedState;\n            post.likesCount -= likeChange;\n            this.$message.error('更新点赞状态失败，请重试');\n          });\n      }\n    },\n    toggleComment(postId) {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        post.showComments = !post.showComments;\n        // 初始化评论输入框，使用$set确保响应式\n        if (!this.commentContent[postId]) {\n          this.$set(this.commentContent, postId, '');\n        }\n        // 显示评论时加载最新评论数据\n        if (post.showComments) {\n          this.loadComments(postId);\n        }\n      }\n    },\n    addComment(postId) {\n        // 确保commentContent[postId]已初始化，使用$set确保响应式\n        if (!this.commentContent[postId]) {\n          this.$set(this.commentContent, postId, '');\n        }\n        const content = this.commentContent[postId];\n        if (!content.trim()) {\n          this.$message.warning('评论内容不能为空');\n          return;\n        }\n\n        // 确保currentUser有id属性\n        if (!this.currentUser.id) {\n          console.error('用户ID不存在，无法添加评论');\n          this.$message.error('用户信息不完整，请重新登录');\n          return;\n        }\n\n      // 调用后端API添加评论，包含用户ID\n      this.$axios.post(`/forum/posts/${postId}/comments`, {\n        content,\n        userId: this.currentUser.id\n      })\n        .then(({ data }) => {\n          // 成功后更新本地评论列表\n          console.log('后端返回的评论数据:', data);\n          const post = this.posts.find(p => p.id === postId);\n          if (post) {\n            if (!post.comments) {\n              post.comments = [];\n            }\n            // 检查是否有重复ID的评论\n            const hasDuplicate = post.comments.some(comment => comment.id === data.id);\n            if (hasDuplicate) {\n              console.warn('发现重复ID的评论:', data.id);\n            }\n            // 使用后端返回的评论数据\n            post.comments.push(data);\n            this.commentContent[postId] = '';\n            this.$message.success('评论成功');\n          }\n        })\n        .catch(error => {\n          console.error('添加评论失败:', error);\n          this.$message.error('添加评论失败，请重试');\n        });\n    },\n    // 发布新动态\n    createPost() {\n      console.log('当前用户信息:', this.currentUser);\n      console.log('用户ID:', this.currentUser.id);\n      \n      if (!this.currentUser || !this.currentUser.id) {\n        console.error('用户未登录或用户信息不完整');\n        this.$message.error('请先登录');\n        return;\n      }\n      if (!this.postContent.trim()) {\n        this.$message.warning('动态内容不能为空');\n        return;\n      }\n\n      const postData = {\n        content: this.postContent,\n        userId: this.currentUser.id\n      };\n      console.log('发送的请求数据:', postData);\n      \n      this.$axios.post('/forum/posts', postData)\n        .then(() => {\n          // 成功发布后，重新加载动态列表\n          this.loadPosts();\n          this.postContent = '';\n          this.$message.success('发布成功');\n        })\n        .catch(error => {\n          console.error('发布动态失败:', error);\n          console.error('错误详情:', error.response ? error.response.data : '无响应数据');\n          this.$message.error(`发布动态失败: ${error.response ? error.response.data.message || '服务器内部错误' : '网络连接问题'}`);\n        });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.forum-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.forum-content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  background-color: #f5f7fa;\n}\n\n.post-create {\n  margin-bottom: 30px;\n}\n\n.post-form {\n  margin-top: 15px;\n}\n\n.post-actions {\n  text-align: right;\n  margin-top: 10px;\n}\n\n.posts-list h3 {\n  font-size: 20px;\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.post-card {\n  margin-bottom: 20px;\n}\n\n.post-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n\n.user-info {\n  flex: 1;\n}\n\n.username {\n  font-weight: bold;\n  margin-bottom: 2px;\n}\n\n.post-time {\n  font-size: 12px;\n  color: #999;\n}\n\n.post-content {\n  margin-bottom: 15px;\n  line-height: 1.6;\n}\n\n.post-actions {\n  display: flex;\n  justify-content: space-between;\n  padding-top: 10px;\n  border-top: 1px solid #f0f0f0;\n}\n\n.action-item {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: #666;\n}\n\n.action-item i {\n  margin-right: 5px;\n}\n\n.comments-section {\n  margin-top: 15px;\n  padding-top: 15px;\n  border-top: 1px solid #f0f0f0;\n}\n\n.comment-item {\n  display: flex;\n  margin-bottom: 15px;\n}\n\n.comment-avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n\n.comment-content {\n  flex: 1;\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 8px;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n}\n\n.comment-username {\n  font-weight: bold;\n  font-size: 14px;\n}\n\n.comment-time {\n  font-size: 12px;\n  color: #999;\n}\n\n.comment-text {\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n.add-comment {\n  display: flex;\n  margin-top: 15px;\n}\n\n.add-comment .el-input {\n  flex: 1;\n  margin-right: 10px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}