{"ast":null,"code":"export default {\n  name: 'UserProfile',\n  data() {\n    return {\n      activeIndex: '6-1',\n      userForm: {\n        username: '',\n        email: '',\n        phone: ''\n      },\n      userRole: '',\n      userAvatar: 'https://picsum.photos/200/200?random=1',\n      isJobSeeker: false,\n      isCompany: false,\n      jobPreferenceForm: {\n        desiredPosition: '',\n        expectedSalary: '',\n        desiredCity: '',\n        workExperience: ''\n      },\n      resumeUrl: '',\n      jobApplications: [{\n        id: 1,\n        jobTitle: '前端开发工程师',\n        companyName: '科技有限公司',\n        status: 2,\n        applyTime: '2023-06-15 10:30'\n      }, {\n        id: 2,\n        jobTitle: '后端开发工程师',\n        companyName: '互联网有限公司',\n        status: 1,\n        applyTime: '2023-06-14 09:15'\n      }, {\n        id: 3,\n        jobTitle: '产品经理',\n        companyName: '软件有限公司',\n        status: 0,\n        applyTime: '2023-06-12 14:45'\n      }],\n      postedJobs: [{\n        id: 1,\n        title: '前端开发工程师',\n        salary: '15k-25k',\n        location: '北京',\n        applications: 24,\n        status: 1\n      }, {\n        id: 2,\n        title: 'UI设计师',\n        salary: '12k-20k',\n        location: '上海',\n        applications: 18,\n        status: 1\n      }, {\n        id: 3,\n        title: '后端开发工程师',\n        salary: '18k-30k',\n        location: '广州',\n        applications: 32,\n        status: 0\n      }]\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    }\n  },\n  created() {\n    if (this.isLoggedIn) {\n      this.loadUserInfo();\n      this.checkUserRole();\n      if (this.isJobSeeker) {\n        this.loadJobApplications();\n        this.loadResumeInfo();\n      } else if (this.isCompany) {\n        this.loadPostedJobs();\n      }\n    } else {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    handleSelect(key) {\n      switch (key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          this.$router.push('/forum');\n          break;\n        case '6-2':\n          this.$router.push('/admin');\n          break;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    loadUserInfo() {\n      // 从API获取用户信息\n      this.$axios.get('/api/user/profile').then(({\n        data\n      }) => {\n        const user = data;\n        this.userForm.username = user.username;\n        this.userForm.email = user.email || '';\n        this.userForm.phone = user.phone || '';\n        this.userAvatar = user.avatar || 'https://picsum.photos/200/200?random=1';\n\n        // 设置用户角色显示\n        if (user.role === 0) {\n          this.userRole = '求职者';\n        } else if (user.role === 1) {\n          this.userRole = '企业';\n        } else if (user.role === 2) {\n          this.userRole = '管理员';\n        }\n      }).catch(error => {\n        console.error('加载用户信息失败:', error);\n        this.$message.error('加载用户信息失败');\n      });\n\n      // 加载求职意向\n      this.loadJobPreference();\n    },\n    loadJobPreference() {\n      this.$axios.get('/api/user/job-preference').then(({\n        data\n      }) => {\n        this.jobPreferenceForm = data;\n      }).catch(error => {\n        console.error('加载求职意向失败:', error);\n        this.$message.error('加载求职意向失败');\n      });\n    },\n    checkUserRole() {\n      const role = this.currentUser.role;\n      this.isJobSeeker = role === 0;\n      this.isCompany = role === 1;\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.$axios.post('/api/user/profile/update', this.userForm).then(() => {\n            this.$message.success('个人信息更新成功');\n            // 更新store中的用户信息\n            this.$store.dispatch('updateUserInfo', this.userForm);\n          }).catch(error => {\n            console.error('更新个人信息失败:', error);\n            this.$message.error('更新个人信息失败，请稍后重试');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    uploadAvatar() {\n      this.$refs.avatarInput.click();\n    },\n    handleAvatarUpload(e) {\n      const file = e.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append('avatar', file);\n        this.$axios.post('/api/user/avatar/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(({\n          data\n        }) => {\n          this.userAvatar = data.avatarUrl;\n          this.$message.success('头像上传成功');\n          // 更新store中的头像信息\n          this.$store.commit('setUser', {\n            ...this.currentUser,\n            avatar: data.avatarUrl\n          });\n        }).catch(error => {\n          console.error('头像上传失败:', error);\n          this.$message.error('头像上传失败，请稍后重试');\n        });\n\n        // 清空input值，以便能重复上传同一文件\n        e.target.value = '';\n      }\n    },\n    submitJobPreferenceForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.$axios.post('/api/user/job-preference', this.jobPreferenceForm).then(() => {\n            this.$message.success('求职意向保存成功');\n          }).catch(error => {\n            console.error('保存求职意向失败:', error);\n            this.$message.error('保存求职意向失败，请稍后重试');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    handleResumeUploadSuccess(response) {\n      this.resumeUrl = response.resumeUrl;\n      this.$message.success('简历上传成功');\n    },\n    uploadResume(params) {\n      const formData = new FormData();\n      formData.append('resume', params.file);\n      this.$axios.post('/user/resume/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        params.onSuccess(response.data);\n      }).catch(error => {\n        params.onError(error);\n      });\n    },\n    handleResumeUploadError() {\n      this.$message.error('简历上传失败，请重试');\n    },\n    loadJobApplications() {\n      // 模拟API调用获取职位申请列表\n      // 实际项目中应替换为真实API调用\n    },\n    loadResumeInfo() {\n      this.$axios.get('/api/user/resume').then(({\n        data\n      }) => {\n        this.resumeUrl = data.resumeUrl;\n      }).catch(error => {\n        console.error('加载简历信息失败:', error);\n      });\n    },\n    loadPostedJobs() {\n      // 模拟API调用获取已发布职位\n      // 实际项目中应替换为真实API调用\n    },\n    goToPublishJob() {\n      this.$router.push('/company/publish-job');\n    },\n    editJob(id) {\n      // 跳转到编辑职位页面\n      this.$router.push(`/company/edit-job/${id}`);\n    },\n    deleteJob(id) {\n      this.$confirm('确定要删除该职位吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 模拟API调用删除职位\n        setTimeout(() => {\n          this.postedJobs = this.postedJobs.filter(job => job.id !== id);\n          this.$message.success('职位删除成功');\n        }, 500);\n      }).catch(() => {\n        this.$message.info('已取消删除');\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","activeIndex","userForm","username","email","phone","userRole","userAvatar","isJobSeeker","isCompany","jobPreferenceForm","desiredPosition","expectedSalary","desiredCity","workExperience","resumeUrl","jobApplications","id","jobTitle","companyName","status","applyTime","postedJobs","title","salary","location","applications","computed","isLoggedIn","$store","getters","currentUser","created","loadUserInfo","checkUserRole","loadJobApplications","loadResumeInfo","loadPostedJobs","$router","push","methods","handleSelect","key","logout","dispatch","$message","success","$axios","get","then","user","avatar","role","catch","error","console","loadJobPreference","submitForm","formName","$refs","validate","valid","post","uploadAvatar","avatarInput","click","handleAvatarUpload","e","file","target","files","formData","FormData","append","headers","avatarUrl","commit","value","submitJobPreferenceForm","handleResumeUploadSuccess","response","uploadResume","params","onSuccess","onError","handleResumeUploadError","goToPublishJob","editJob","deleteJob","$confirm","confirmButtonText","cancelButtonText","type","setTimeout","filter","job","info"],"sources":["src/views/UserProfile.vue"],"sourcesContent":["<template>\n  <div class=\"user-profile-container\">\n    <!-- 导航栏 -->\n    <el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\n      <el-menu-item index=\"1\">首页</el-menu-item>\n      <el-menu-item index=\"2\">职位</el-menu-item>\n      <el-menu-item index=\"3\">企业</el-menu-item>\n      <el-menu-item index=\"4\">消息</el-menu-item>\n      <el-menu-item index=\"5\">论坛</el-menu-item>\n      <el-submenu index=\"6\" v-if=\"isLoggedIn\">\n        <template slot=\"title\">{{ currentUser.username }}</template>\n        <el-menu-item index=\"6-1\" class=\"active\">个人中心</el-menu-item>\n        <el-menu-item index=\"6-2\" v-if=\"currentUser.role === 2\">管理员面板</el-menu-item>\n        <el-menu-item index=\"6-3\" @click=\"logout\">退出登录</el-menu-item>\n      </el-submenu>\n    </el-menu>\n\n    <div class=\"profile-content\">\n      <el-card class=\"profile-card\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>个人资料</span>\n        </div>\n        <div class=\"profile-info\">\n          <div class=\"avatar-container\">\n            <img :src=\"userAvatar\" alt=\"用户头像\" class=\"avatar\">\n            <el-button type=\"primary\" size=\"small\" @click=\"uploadAvatar\">更换头像</el-button>\n            <input type=\"file\" ref=\"avatarInput\" style=\"display: none;\" accept=\"image/*\" @change=\"handleAvatarUpload\">\n          </div>\n          <div class=\"user-details\">\n            <el-form ref=\"userForm\" :model=\"userForm\" label-width=\"100px\">\n              <el-form-item label=\"用户名\">\n                <el-input v-model=\"userForm.username\" disabled></el-input>\n              </el-form-item>\n              <el-form-item label=\"邮箱\">\n                <el-input v-model=\"userForm.email\"></el-input>\n              </el-form-item>\n              <el-form-item label=\"手机号\">\n                <el-input v-model=\"userForm.phone\"></el-input>\n              </el-form-item>\n              <el-form-item label=\"角色\">\n                <el-input v-model=\"userRole\" disabled></el-input>\n              </el-form-item>\n              <el-form-item>\n                <el-button type=\"primary\" @click=\"submitForm('userForm')\">保存修改</el-button>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card class=\"settings-card\" v-if=\"isJobSeeker\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>求职意向</span>\n        </div>\n        <el-form ref=\"jobPreferenceForm\" :model=\"jobPreferenceForm\" label-width=\"100px\">\n          <el-form-item label=\"期望职位\">\n            <el-input v-model=\"jobPreferenceForm.desiredPosition\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"期望薪资\">\n            <el-input v-model=\"jobPreferenceForm.expectedSalary\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"期望城市\">\n            <el-input v-model=\"jobPreferenceForm.desiredCity\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"工作经验\">\n            <el-select v-model=\"jobPreferenceForm.workExperience\" placeholder=\"请选择工作经验\">\n              <el-option label=\"应届毕业生\" value=\"0\"></el-option>\n              <el-option label=\"1年以内\" value=\"1\"></el-option>\n              <el-option label=\"1-3年\" value=\"2\"></el-option>\n              <el-option label=\"3-5年\" value=\"3\"></el-option>\n              <el-option label=\"5年以上\" value=\"4\"></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"submitJobPreferenceForm('jobPreferenceForm')\">保存</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n\n      <el-card class=\"resume-card\" v-if=\"isJobSeeker\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>我的简历</span>\n        </div>\n        <div class=\"resume-upload\">\n          <el-upload\n            class=\"upload-resume\"\n              action=\"\" \n             :http-request=\"uploadResume\"\n              :on-success=\"handleResumeUploadSuccess\"\n            :on-error=\"handleResumeUploadError\"\n            :show-file-list=\"false\"\n          >\n            <el-button size=\"small\" type=\"primary\">上传简历</el-button>\n          </el-upload>\n          <div v-if=\"resumeUrl\" class=\"resume-download\">\n            <p>已上传简历: <a :href=\"resumeUrl\" target=\"_blank\">查看简历</a></p>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card class=\"applications-card\" v-if=\"isJobSeeker\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>我的申请</span>\n        </div>\n        <el-table :data=\"jobApplications\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\n          <el-table-column prop=\"jobTitle\" label=\"职位名称\" width=\"200\"></el-table-column>\n          <el-table-column prop=\"companyName\" label=\"公司名称\" width=\"200\"></el-table-column>\n          <el-table-column prop=\"status\" label=\"申请状态\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <span v-if=\"scope.row.status === 0\" style=\"color: #999\">待处理</span>\n              <span v-if=\"scope.row.status === 1\" style=\"color: #1890ff\">已查看</span>\n              <span v-if=\"scope.row.status === 2\" style=\"color: #52c41a\">面试邀请</span>\n              <span v-if=\"scope.row.status === 3\" style=\"color: #ff4d4f\">已拒绝</span>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"applyTime\" label=\"申请时间\" width=\"180\"></el-table-column>\n        </el-table>\n      </el-card>\n\n      <el-card class=\"posted-jobs-card\" v-if=\"isCompany\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>我发布的职位</span>\n          <el-button type=\"primary\" size=\"small\" @click=\"goToPublishJob\">发布新职位</el-button>\n        </div>\n        <el-table :data=\"postedJobs\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\n          <el-table-column prop=\"title\" label=\"职位名称\" width=\"200\"></el-table-column>\n          <el-table-column prop=\"salary\" label=\"薪资范围\" width=\"120\"></el-table-column>\n          <el-table-column prop=\"location\" label=\"工作地点\" width=\"120\"></el-table-column>\n          <el-table-column prop=\"applications\" label=\"申请数\" width=\"80\"></el-table-column>\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <span v-if=\"scope.row.status === 1\" style=\"color: #52c41a\">已发布</span>\n              <span v-if=\"scope.row.status === 0\" style=\"color: #999\">未发布</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"150\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"primary\" size=\"small\" @click=\"editJob(scope.row.id)\">编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" @click=\"deleteJob(scope.row.id)\">删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      activeIndex: '6-1',\n      userForm: {\n        username: '',\n        email: '',\n        phone: ''\n      },\n      userRole: '',\n      userAvatar: 'https://picsum.photos/200/200?random=1',\n      isJobSeeker: false,\n      isCompany: false,\n      jobPreferenceForm: {\n        desiredPosition: '',\n        expectedSalary: '',\n        desiredCity: '',\n        workExperience: ''\n      },\n      resumeUrl: '',\n      jobApplications: [\n        { id: 1, jobTitle: '前端开发工程师', companyName: '科技有限公司', status: 2, applyTime: '2023-06-15 10:30' },\n        { id: 2, jobTitle: '后端开发工程师', companyName: '互联网有限公司', status: 1, applyTime: '2023-06-14 09:15' },\n        { id: 3, jobTitle: '产品经理', companyName: '软件有限公司', status: 0, applyTime: '2023-06-12 14:45' }\n      ],\n      postedJobs: [\n        { id: 1, title: '前端开发工程师', salary: '15k-25k', location: '北京', applications: 24, status: 1 },\n        { id: 2, title: 'UI设计师', salary: '12k-20k', location: '上海', applications: 18, status: 1 },\n        { id: 3, title: '后端开发工程师', salary: '18k-30k', location: '广州', applications: 32, status: 0 }\n      ]\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    }\n  },\n  created() {\n    if (this.isLoggedIn) {\n      this.loadUserInfo();\n      this.checkUserRole();\n      if (this.isJobSeeker) {\n        this.loadJobApplications();\n        this.loadResumeInfo();\n      } else if (this.isCompany) {\n        this.loadPostedJobs();\n      }\n    } else {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    handleSelect(key) {\n      switch(key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          this.$router.push('/forum');\n          break;\n        case '6-2':\n          this.$router.push('/admin');\n          break;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    loadUserInfo() {\n      // 从API获取用户信息\n      this.$axios.get('/api/user/profile')\n        .then(({ data }) => {\n          const user = data;\n          this.userForm.username = user.username;\n          this.userForm.email = user.email || '';\n          this.userForm.phone = user.phone || '';\n          this.userAvatar = user.avatar || 'https://picsum.photos/200/200?random=1';\n          \n          // 设置用户角色显示\n          if (user.role === 0) {\n            this.userRole = '求职者';\n          } else if (user.role === 1) {\n            this.userRole = '企业';\n          } else if (user.role === 2) {\n            this.userRole = '管理员';\n          }\n        })\n        .catch(error => {\n          console.error('加载用户信息失败:', error);\n          this.$message.error('加载用户信息失败');\n        });\n\n      // 加载求职意向\n      this.loadJobPreference();\n    },\n\n    loadJobPreference() {\n      this.$axios.get('/api/user/job-preference')\n        .then(({ data }) => {\n          this.jobPreferenceForm = data;\n        })\n        .catch(error => {\n          console.error('加载求职意向失败:', error);\n          this.$message.error('加载求职意向失败');\n        });\n    },\n    checkUserRole() {\n      const role = this.currentUser.role;\n      this.isJobSeeker = role === 0;\n      this.isCompany = role === 1;\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          this.$axios.post('/api/user/profile/update', this.userForm)\n            .then(() => {\n              this.$message.success('个人信息更新成功');\n              // 更新store中的用户信息\n              this.$store.dispatch('updateUserInfo', this.userForm);\n            })\n            .catch(error => {\n              console.error('更新个人信息失败:', error);\n              this.$message.error('更新个人信息失败，请稍后重试');\n            });\n        } else {\n          return false;\n        }\n      });\n    },\n    uploadAvatar() {\n      this.$refs.avatarInput.click();\n    },\n    handleAvatarUpload(e) {\n      const file = e.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append('avatar', file);\n        \n        this.$axios.post('/api/user/avatar/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        })\n        .then(({ data }) => {\n          this.userAvatar = data.avatarUrl;\n          this.$message.success('头像上传成功');\n          // 更新store中的头像信息\n          this.$store.commit('setUser', { ...this.currentUser, avatar: data.avatarUrl });\n        })\n        .catch(error => {\n          console.error('头像上传失败:', error);\n          this.$message.error('头像上传失败，请稍后重试');\n        });\n        \n        // 清空input值，以便能重复上传同一文件\n        e.target.value = '';\n      }\n    },\n    submitJobPreferenceForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          this.$axios.post('/api/user/job-preference', this.jobPreferenceForm)\n            .then(() => {\n              this.$message.success('求职意向保存成功');\n            })\n            .catch(error => {\n              console.error('保存求职意向失败:', error);\n              this.$message.error('保存求职意向失败，请稍后重试');\n            });\n        } else {\n          return false;\n        }\n      });\n    },\n    handleResumeUploadSuccess(response) {\n      this.resumeUrl = response.resumeUrl;\n      this.$message.success('简历上传成功');\n    },\n    uploadResume(params) {\n      const formData = new FormData();\n      formData.append('resume', params.file);\n      \n      this.$axios.post('/user/resume/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n      .then(response => {\n        params.onSuccess(response.data);\n      })\n      .catch(error => {\n        params.onError(error);\n      });\n    },\n    handleResumeUploadError() {\n      this.$message.error('简历上传失败，请重试');\n    },\n    loadJobApplications() {\n      // 模拟API调用获取职位申请列表\n      // 实际项目中应替换为真实API调用\n    },\n    loadResumeInfo() {\n      this.$axios.get('/api/user/resume')\n        .then(({ data }) => {\n          this.resumeUrl = data.resumeUrl;\n        })\n        .catch(error => {\n          console.error('加载简历信息失败:', error);\n        });\n    },\n    loadPostedJobs() {\n      // 模拟API调用获取已发布职位\n      // 实际项目中应替换为真实API调用\n    },\n    goToPublishJob() {\n      this.$router.push('/company/publish-job');\n    },\n    editJob(id) {\n      // 跳转到编辑职位页面\n      this.$router.push(`/company/edit-job/${id}`);\n    },\n    deleteJob(id) {\n      this.$confirm('确定要删除该职位吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 模拟API调用删除职位\n        setTimeout(() => {\n          this.postedJobs = this.postedJobs.filter(job => job.id !== id);\n          this.$message.success('职位删除成功');\n        }, 500);\n      }).catch(() => {\n        this.$message.info('已取消删除');\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.user-profile-container {\n  padding-bottom: 30px;\n}\n\n.profile-content {\n  padding: 20px;\n}\n\n.profile-card,\n.settings-card,\n.resume-card,\n.applications-card,\n.posted-jobs-card {\n  margin-bottom: 20px;\n}\n\n.profile-info {\n  display: flex;\n  padding: 20px 0;\n}\n\n.avatar-container {\n  flex: 0 0 200px;\n  text-align: center;\n  margin-right: 40px;\n}\n\n.avatar {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  margin-bottom: 10px;\n}\n\n.user-details {\n  flex: 1;\n}\n\n.resume-upload {\n  padding: 20px 0;\n}\n\n.resume-download {\n  margin-top: 10px;\n}\n\n.posted-jobs-card .el-card__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}