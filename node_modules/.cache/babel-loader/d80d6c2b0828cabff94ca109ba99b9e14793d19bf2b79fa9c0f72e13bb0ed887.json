{"ast":null,"code":"import { Message } from 'element-ui';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        role: '0'\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度不能少于6位',\n          trigger: 'blur'\n        }],\n        role: [{\n          required: true,\n          message: '请选择角色',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    testPassword(formName) {\n      console.log('开始测试密码:', formName);\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          console.log('测试密码请求参数:', this.loginForm);\n          this.$axios.post('/user/test-password', this.loginForm).then(response => {\n            console.log('密码测试响应:', response.data);\n            const {\n              matches,\n              storedPassword,\n              encodedInputPassword,\n              selfEncodedMatches\n            } = response.data;\n            this.$message({\n              message: `密码匹配结果: ${matches}\\n存储的密码: ${storedPassword}\\n加密后的输入密码: ${encodedInputPassword}\\n自加密匹配结果: ${selfEncodedMatches}`,\n              type: matches ? 'success' : 'warning',\n              duration: 10000\n            });\n          }).catch(error => {\n            this.$message.error('测试失败: ' + (error.response && error.response.data && error.response.data.message ? error.response.data.message : '请求失败'));\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    submitForm(formName) {\n      console.log('开始提交登录表单:', formName);\n      console.log('当前表单数据:', JSON.stringify(this.loginForm));\n      this.$refs[formName].validate(valid => {\n        console.log('表单验证结果:', valid);\n        if (valid) {\n          console.log('登录请求参数:', this.loginForm);\n          console.log('是否选择管理员角色:', this.loginForm.role === '2');\n          console.log('请求URL:', '/user/login');\n          console.log('axios baseURL:', this.$axios.defaults.baseURL);\n          console.log('完整请求URL:', this.$axios.defaults.baseURL + '/user/login');\n          this.$axios.post('/user/login', this.loginForm).then(response => {\n            console.log('登录响应:', response.data);\n            const {\n              token,\n              id,\n              username,\n              email,\n              role\n            } = response.data;\n            this.$store.dispatch('login', {\n              user: {\n                id,\n                username,\n                email,\n                role\n              },\n              token\n            });\n            Message.success('登录成功');\n            // 跳转到首页或之前的页面\n            const redirect = this.$route.query.redirect || '/';\n            this.$router.push(redirect);\n          }).catch(error => {\n            this.$message.error('登录失败: ' + (error.response && error.response.data && error.response.data.message ? error.response.data.message : '用户名或密码错误'));\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    goToRegister() {\n      this.$router.push('/register');\n    }\n  }\n};","map":{"version":3,"names":["Message","name","data","loginForm","username","password","role","rules","required","message","trigger","min","methods","testPassword","formName","console","log","$refs","validate","valid","$axios","post","then","response","matches","storedPassword","encodedInputPassword","selfEncodedMatches","$message","type","duration","catch","error","submitForm","JSON","stringify","defaults","baseURL","token","id","email","$store","dispatch","user","success","redirect","$route","query","$router","push","goToRegister"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>登录</span>\n      </div>\n      <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"loginForm.username\" placeholder=\"请输入用户名\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input type=\"password\" v-model=\"loginForm.password\" placeholder=\"请输入密码\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"角色\" prop=\"role\">\n          <el-select v-model=\"loginForm.role\" placeholder=\"请选择角色\">\n            <el-option label=\"求职者\" value=\"0\"></el-option>\n            <el-option label=\"企业\" value=\"1\"></el-option>\n            <el-option label=\"管理员\" value=\"2\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm('loginForm')\" style=\"width: 48%\">登录</el-button>\n          <el-button type=\"info\" @click=\"testPassword('loginForm')\" style=\"width: 48%; margin-left: 4%\">测试密码</el-button>\n        </el-form-item>\n        <el-form-item>\n          <span>还没有账号？</span>\n          <el-button type=\"text\" @click=\"goToRegister\">立即注册</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { Message } from 'element-ui';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        role: '0'\n      },\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          { min: 6, message: '密码长度不能少于6位', trigger: 'blur' }\n        ],\n        role: [\n          { required: true, message: '请选择角色', trigger: 'change' }\n        ]\n      }\n    }\n  },\n  methods: {\n    testPassword(formName) {\n      console.log('开始测试密码:', formName);\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          console.log('测试密码请求参数:', this.loginForm);\n          this.$axios.post('/user/test-password', this.loginForm)\n            .then(response => {\n              console.log('密码测试响应:', response.data);\n              const { matches, storedPassword, encodedInputPassword, selfEncodedMatches } = response.data;\n              this.$message({\n                message: `密码匹配结果: ${matches}\\n存储的密码: ${storedPassword}\\n加密后的输入密码: ${encodedInputPassword}\\n自加密匹配结果: ${selfEncodedMatches}`,\n                type: matches ? 'success' : 'warning',\n                duration: 10000\n              });\n            })\n            .catch(error => {\n              this.$message.error('测试失败: ' + (error.response && error.response.data && error.response.data.message ? error.response.data.message : '请求失败'));\n            });\n        } else {\n          return false;\n        }\n      });\n    },\n\n    submitForm(formName) {\n      console.log('开始提交登录表单:', formName);\n      console.log('当前表单数据:', JSON.stringify(this.loginForm));\n      this.$refs[formName].validate((valid) => {\n        console.log('表单验证结果:', valid);\n        if (valid) {\n          console.log('登录请求参数:', this.loginForm);\n          console.log('是否选择管理员角色:', this.loginForm.role === '2');\n          console.log('请求URL:', '/user/login');\n          console.log('axios baseURL:', this.$axios.defaults.baseURL);\n          console.log('完整请求URL:', this.$axios.defaults.baseURL + '/user/login');\n      this.$axios.post('/user/login', this.loginForm)\n            .then(response => {\n              console.log('登录响应:', response.data);\n              const { token, id, username, email, role } = response.data;\n              this.$store.dispatch('login', {\n                user: {\n                  id, username, email, role\n                },\n                token\n              });\n              Message.success('登录成功');\n              // 跳转到首页或之前的页面\n              const redirect = this.$route.query.redirect || '/';\n              this.$router.push(redirect);\n            })\n            .catch(error => {\n              this.$message.error('登录失败: ' + (error.response && error.response.data && error.response.data.message ? error.response.data.message : '用户名或密码错误'));\n            });\n        } else {\n          return false;\n        }\n      });\n    },\n    goToRegister() {\n      this.$router.push('/register');\n    }\n  }\n}\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f5f7fa;\n}\n.login-card {\n  width: 500px;\n}\n\n.el-button + .el-button {\n  margin-left: 4%;\n}\n</style>"],"mappings":"AAkCA,SAAAA,OAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;QACAC,IAAA;MACA;MACAC,KAAA;QACAH,QAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,IAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,OAAA;IACAC,aAAAC,QAAA;MACAC,OAAA,CAAAC,GAAA,YAAAF,QAAA;MACA,KAAAG,KAAA,CAAAH,QAAA,EAAAI,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAJ,OAAA,CAAAC,GAAA,mBAAAb,SAAA;UACA,KAAAiB,MAAA,CAAAC,IAAA,6BAAAlB,SAAA,EACAmB,IAAA,CAAAC,QAAA;YACAR,OAAA,CAAAC,GAAA,YAAAO,QAAA,CAAArB,IAAA;YACA;cAAAsB,OAAA;cAAAC,cAAA;cAAAC,oBAAA;cAAAC;YAAA,IAAAJ,QAAA,CAAArB,IAAA;YACA,KAAA0B,QAAA;cACAnB,OAAA,aAAAe,OAAA,YAAAC,cAAA,eAAAC,oBAAA,cAAAC,kBAAA;cACAE,IAAA,EAAAL,OAAA;cACAM,QAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA,aAAAA,KAAA,CAAAT,QAAA,IAAAS,KAAA,CAAAT,QAAA,CAAArB,IAAA,IAAA8B,KAAA,CAAAT,QAAA,CAAArB,IAAA,CAAAO,OAAA,GAAAuB,KAAA,CAAAT,QAAA,CAAArB,IAAA,CAAAO,OAAA;UACA;QACA;UACA;QACA;MACA;IACA;IAEAwB,WAAAnB,QAAA;MACAC,OAAA,CAAAC,GAAA,cAAAF,QAAA;MACAC,OAAA,CAAAC,GAAA,YAAAkB,IAAA,CAAAC,SAAA,MAAAhC,SAAA;MACA,KAAAc,KAAA,CAAAH,QAAA,EAAAI,QAAA,CAAAC,KAAA;QACAJ,OAAA,CAAAC,GAAA,YAAAG,KAAA;QACA,IAAAA,KAAA;UACAJ,OAAA,CAAAC,GAAA,iBAAAb,SAAA;UACAY,OAAA,CAAAC,GAAA,oBAAAb,SAAA,CAAAG,IAAA;UACAS,OAAA,CAAAC,GAAA;UACAD,OAAA,CAAAC,GAAA,wBAAAI,MAAA,CAAAgB,QAAA,CAAAC,OAAA;UACAtB,OAAA,CAAAC,GAAA,kBAAAI,MAAA,CAAAgB,QAAA,CAAAC,OAAA;UACA,KAAAjB,MAAA,CAAAC,IAAA,qBAAAlB,SAAA,EACAmB,IAAA,CAAAC,QAAA;YACAR,OAAA,CAAAC,GAAA,UAAAO,QAAA,CAAArB,IAAA;YACA;cAAAoC,KAAA;cAAAC,EAAA;cAAAnC,QAAA;cAAAoC,KAAA;cAAAlC;YAAA,IAAAiB,QAAA,CAAArB,IAAA;YACA,KAAAuC,MAAA,CAAAC,QAAA;cACAC,IAAA;gBACAJ,EAAA;gBAAAnC,QAAA;gBAAAoC,KAAA;gBAAAlC;cACA;cACAgC;YACA;YACAtC,OAAA,CAAA4C,OAAA;YACA;YACA,MAAAC,QAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,QAAA;YACA,KAAAG,OAAA,CAAAC,IAAA,CAAAJ,QAAA;UACA,GACAd,KAAA,CAAAC,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA,aAAAA,KAAA,CAAAT,QAAA,IAAAS,KAAA,CAAAT,QAAA,CAAArB,IAAA,IAAA8B,KAAA,CAAAT,QAAA,CAAArB,IAAA,CAAAO,OAAA,GAAAuB,KAAA,CAAAT,QAAA,CAAArB,IAAA,CAAAO,OAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAyC,aAAA;MACA,KAAAF,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}