{"ast":null,"code":"export default {\n  name: 'ChatRoom',\n  data() {\n    return {\n      activeIndex: '4',\n      contacts: [],\n      selectedContactId: null,\n      messages: [],\n      inputMessage: '',\n      socket: null\n    };\n  },\n  mounted() {\n    this.loadContacts();\n    this.initWebSocket();\n  },\n  beforeDestroy() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    },\n    selectedContact() {\n      return this.contacts.find(contact => contact.id === this.selectedContactId) || {};\n    }\n  },\n  methods: {\n    loadContacts() {\n      // 从后端获取联系人列表\n      this.$axios.get('/messages/contacts').then(response => {\n        this.contacts = response.data;\n      }).catch(error => {\n        console.error('加载联系人失败:', error);\n        this.$message.error('加载联系人失败，请稍后重试');\n      });\n    },\n    initWebSocket() {\n      // 建立WebSocket连接\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${window.location.host}/ws/chat`;\n      this.socket = new WebSocket(wsUrl);\n\n      // 监听连接建立\n      this.socket.onopen = () => {\n        console.log('WebSocket连接已建立');\n      };\n\n      // 监听消息接收\n      this.socket.onmessage = event => {\n        const message = JSON.parse(event.data);\n        // 检查是否是当前选中联系人的消息\n        if (this.selectedContactId === message.contactId) {\n          this.messages.push(message);\n        } else {\n          // 更新未读消息计数\n          const contact = this.contacts.find(c => c.id === message.contactId);\n          if (contact) {\n            contact.unreadCount = (contact.unreadCount || 0) + 1;\n            contact.lastMessage = message.content;\n            contact.time = new Date().toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            });\n          }\n        }\n      };\n\n      // 监听连接关闭\n      this.socket.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        // 可以在这里实现重连逻辑\n        setTimeout(() => this.initWebSocket(), 3000);\n      };\n\n      // 监听错误\n      this.socket.onerror = error => {\n        console.error('WebSocket错误:', error);\n      };\n    },\n    handleSelect(key) {\n      switch (key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '9':\n          // 发布职位\n          this.$router.push('/company/PublishJob'); // 跳转到发布职位页面\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          this.$router.push('/forum');\n          break;\n        case '6':\n          this.$router.push('/login');\n          break;\n        case '7':\n          this.$router.push('/register');\n          break;\n        case '8-1':\n          this.$router.push('/user');\n          break;\n        case '8-2':\n          this.$router.push('/admin');\n          break;\n        default:\n          return;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    selectContact(id) {\n      this.selectedContactId = id;\n      // 模拟加载聊天记录\n      this.loadMessages(id);\n      // 清空未读消息\n      const contact = this.contacts.find(c => c.id === id);\n      if (contact) {\n        contact.unreadCount = 0;\n      }\n    },\n    loadMessages(contactId) {\n      // 从后端获取聊天记录\n      this.$axios.get(`/messages/history/${contactId}`).then(response => {\n        this.messages = response.data;\n      }).catch(error => {\n        console.error('加载聊天记录失败:', error);\n        this.$message.error('加载聊天记录失败，请稍后重试');\n      });\n    },\n    sendMessage() {\n      if (!this.inputMessage.trim()) return;\n      const newMessage = {\n        id: this.messages.length + 1,\n        content: this.inputMessage,\n        isSent: true,\n        time: new Date().toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        contactId: this.selectedContactId\n      };\n      this.messages.push(newMessage);\n      this.inputMessage = '';\n\n      // 通过WebSocket发送消息\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(JSON.stringify(newMessage));\n      } else {\n        this.$message.error('WebSocket连接未建立，无法发送消息');\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","activeIndex","contacts","selectedContactId","messages","inputMessage","socket","mounted","loadContacts","initWebSocket","beforeDestroy","close","computed","isLoggedIn","$store","getters","currentUser","selectedContact","find","contact","id","methods","$axios","get","then","response","catch","error","console","$message","wsProtocol","window","location","protocol","wsUrl","host","WebSocket","onopen","log","onmessage","event","message","JSON","parse","contactId","push","c","unreadCount","lastMessage","content","time","Date","toLocaleTimeString","hour","minute","onclose","setTimeout","onerror","handleSelect","key","$router","logout","dispatch","success","selectContact","loadMessages","sendMessage","trim","newMessage","length","isSent","readyState","OPEN","send","stringify"],"sources":["src/views/ChatRoom.vue"],"sourcesContent":["<template>\n  <div class=\"chat-room-container\">\n    <!-- 导航栏 -->\n    <el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\n      <!-- 首页 - 始终显示 -->\n      <el-menu-item index=\"1\">首页</el-menu-item>\n      \n      <!-- 发布职位 - 仅企业用户显示 -->\n      <el-menu-item index=\"9\" v-if=\"isLoggedIn && currentUser.role === 1\">发布职位</el-menu-item>\n      \n      <!-- 消息 - 仅登录用户显示 -->\n      <el-menu-item index=\"4\">消息</el-menu-item>\n      \n      <!-- 其他菜单项 - 非企业用户显示 -->\n      <template v-if=\"!isLoggedIn || currentUser.role !== 1\">\n        <el-menu-item index=\"2\">职位</el-menu-item>\n        <el-menu-item index=\"3\">企业</el-menu-item>\n        <el-menu-item index=\"5\" v-if=\"isLoggedIn && currentUser.role === 0\">论坛</el-menu-item>\n        <el-menu-item index=\"6\" v-if=\"!isLoggedIn\">登录</el-menu-item>\n        <el-menu-item index=\"7\" v-if=\"!isLoggedIn\">注册</el-menu-item>\n      </template>\n      \n      <!-- 用户下拉菜单 - 所有登录用户显示 -->\n      <el-submenu index=\"8\" v-if=\"isLoggedIn\">\n        <template slot=\"title\">{{ currentUser.username }}</template>\n        <el-menu-item index=\"8-1\">个人中心</el-menu-item>\n        <el-menu-item index=\"8-2\" v-if=\"currentUser.role === 2\">管理员面板</el-menu-item>\n        <el-menu-item index=\"8-3\" @click=\"logout\">退出登录</el-menu-item>\n      </el-submenu>\n    </el-menu>\n\n    <div class=\"chat-container\">\n      <!-- 左侧消息列表 -->\n      <div class=\"message-list\">\n        <div class=\"search-bar\">\n          <el-input placeholder=\"搜索聊天\" prefix-icon=\"el-icon-search\"></el-input>\n        </div>\n        <div class=\"contact-list\">\n          <div\n            v-for=\"contact in contacts\"\n            :key=\"contact.id\"\n            :class=\"{ 'active': selectedContactId === contact.id }\"\n            class=\"contact-item\"\n            @click=\"selectContact(contact.id)\"\n          >\n            <img :src=\"contact.avatar\" alt=\"头像\" class=\"avatar\">\n            <div class=\"contact-info\">\n              <div class=\"contact-name\">{{ contact.name }}</div>\n              <div class=\"last-message\">{{ contact.lastMessage }}</div>\n            </div>\n            <div class=\"message-time\">{{ contact.time }}</div>\n            <div v-if=\"contact.unreadCount > 0\" class=\"unread-count\">{{ contact.unreadCount }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 右侧聊天内容 -->\n      <div class=\"chat-content\" v-if=\"selectedContactId\">\n        <div class=\"chat-header\">\n          <img :src=\"selectedContact.avatar\" alt=\"头像\" class=\"avatar\">\n          <div class=\"contact-name\">{{ selectedContact.name }}</div>\n        </div>\n        <div class=\"messages-container\">\n          <div v-if=\"messages.length > 0\">\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-wrapper\">\n              <div :class=\"{ 'sent': message.isSent, 'received': !message.isSent }\" class=\"message-bubble\">\n                {{ message.content }}\n              </div>\n              <div :class=\"{ 'sent-time': message.isSent, 'received-time': !message.isSent }\" class=\"message-time\">\n                {{ message.time }}\n              </div>\n            </div>\n          </div>\n          <div v-else class=\"no-messages\">\n            <div class=\"no-messages-text\">暂无聊天记录</div>\n            <div class=\"no-messages-hint\">您可以联系公司咨询求职相关信息</div>\n          </div>\n        </div>\n        <div class=\"message-input\">\n          <el-input\n            v-model=\"inputMessage\"\n            type=\"textarea\"\n            placeholder=\"请输入消息...\"\n            :rows=\"4\"\n            @keyup.enter.native=\"sendMessage\"\n          ></el-input>\n          <div class=\"send-button\">\n            <el-button type=\"primary\" @click=\"sendMessage\">发送</el-button>\n          </div>\n        </div>\n      </div>\n      <div class=\"no-selection\" v-else>\n        请选择一个聊天\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ChatRoom',\n  data() {\n      return {\n        activeIndex: '4',\n        contacts: [],\n        selectedContactId: null,\n        messages: [],\n        inputMessage: '',\n        socket: null\n      };\n    },\n    mounted() {\n      this.loadContacts();\n      this.initWebSocket();\n    },\n    beforeDestroy() {\n      if (this.socket) {\n        this.socket.close();\n      }\n    },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    },\n    selectedContact() {\n      return this.contacts.find(contact => contact.id === this.selectedContactId) || {};\n    }\n  },\n  methods: {\n    loadContacts() {\n      // 从后端获取联系人列表\n      this.$axios.get('/messages/contacts')\n        .then(response => {\n          this.contacts = response.data;\n        })\n        .catch(error => {\n          console.error('加载联系人失败:', error);\n          this.$message.error('加载联系人失败，请稍后重试');\n        });\n    },\n    initWebSocket() {\n      // 建立WebSocket连接\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${window.location.host}/ws/chat`;\n      this.socket = new WebSocket(wsUrl);\n\n      // 监听连接建立\n      this.socket.onopen = () => {\n        console.log('WebSocket连接已建立');\n      };\n\n      // 监听消息接收\n      this.socket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        // 检查是否是当前选中联系人的消息\n        if (this.selectedContactId === message.contactId) {\n          this.messages.push(message);\n        } else {\n          // 更新未读消息计数\n          const contact = this.contacts.find(c => c.id === message.contactId);\n          if (contact) {\n            contact.unreadCount = (contact.unreadCount || 0) + 1;\n            contact.lastMessage = message.content;\n            contact.time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n          }\n        }\n      };\n\n      // 监听连接关闭\n      this.socket.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        // 可以在这里实现重连逻辑\n        setTimeout(() => this.initWebSocket(), 3000);\n      };\n\n      // 监听错误\n      this.socket.onerror = (error) => {\n        console.error('WebSocket错误:', error);\n      };\n    },\n    handleSelect(key) {\n      switch(key) {\n        case '1':\n          this.$router.push('/');\n          break;\n        case '9':  // 发布职位\n          this.$router.push('/company/PublishJob');  // 跳转到发布职位页面\n          break;\n        case '2':\n          this.$router.push('/jobs');\n          break;\n        case '3':\n          this.$router.push('/companies');\n          break;\n        case '4':\n          this.$router.push('/chat');\n          break;\n        case '5':\n          this.$router.push('/forum');\n          break;\n        case '6':\n          this.$router.push('/login');\n          break;\n        case '7':\n          this.$router.push('/register');\n          break;\n        case '8-1':\n          this.$router.push('/user');\n          break;\n        case '8-2':\n          this.$router.push('/admin');\n          break;\n        default:\n          return;\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    selectContact(id) {\n      this.selectedContactId = id;\n      // 模拟加载聊天记录\n      this.loadMessages(id);\n      // 清空未读消息\n      const contact = this.contacts.find(c => c.id === id);\n      if (contact) {\n        contact.unreadCount = 0;\n      }\n    },\n    loadMessages(contactId) {\n      // 从后端获取聊天记录\n      this.$axios.get(`/messages/history/${contactId}`)\n        .then(response => {\n          this.messages = response.data;\n        })\n        .catch(error => {\n          console.error('加载聊天记录失败:', error);\n          this.$message.error('加载聊天记录失败，请稍后重试');\n        });\n    },\n    sendMessage() {\n      if (!this.inputMessage.trim()) return;\n      const newMessage = {\n        id: this.messages.length + 1,\n        content: this.inputMessage,\n        isSent: true,\n        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n        contactId: this.selectedContactId\n      };\n      this.messages.push(newMessage);\n      this.inputMessage = '';\n\n      // 通过WebSocket发送消息\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(JSON.stringify(newMessage));\n      } else {\n        this.$message.error('WebSocket连接未建立，无法发送消息');\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-room-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-container {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  border-top: 1px solid #eee;\n}\n\n.message-list {\n  width: 300px;\n  border-right: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n}\n\n.search-bar {\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n.contact-list {\n  flex: 1;\n  overflow-y: auto;\n}\n\n.contact-item {\n  display: flex;\n  padding: 10px;\n  border-bottom: 1px solid #f5f5f5;\n  cursor: pointer;\n  align-items: center;\n}\n\n.contact-item:hover {\n  background-color: #f5f5f5;\n}\n\n.contact-item.active {\n  background-color: #e9f5ff;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n\n.contact-info {\n  flex: 1;\n  overflow: hidden;\n}\n\n.contact-name {\n  font-weight: bold;\n  margin-bottom: 2px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.last-message {\n  font-size: 12px;\n  color: #666;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.message-time {\n  font-size: 12px;\n  color: #999;\n  margin-left: 5px;\n}\n\n.unread-count {\n  background-color: #ff4d4f;\n  color: white;\n  border-radius: 10px;\n  width: 18px;\n  height: 18px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 5px;\n}\n\n.chat-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-header {\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  align-items: center;\n}\n\n.messages-container {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background-color: #f9f9f9;\n}\n\n.no-messages {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n\n.no-messages-text {\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.no-messages-hint {\n  font-size: 14px;\n  text-align: center;\n  max-width: 250px;\n}\n\n.message-wrapper {\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n}\n\n.message-bubble {\n  max-width: 60%;\n  padding: 10px;\n  border-radius: 8px;\n  word-break: break-word;\n}\n\n.sent {\n  background-color: #95ec69;\n  align-self: flex-end;\n}\n\n.received {\n  background-color: white;\n  align-self: flex-start;\n}\n\n.message-time {\n  font-size: 12px;\n  color: #999;\n  margin-top: 5px;\n}\n\n.sent-time {\n  align-self: flex-end;\n}\n\n.received-time {\n  align-self: flex-start;\n}\n\n.message-input {\n  padding: 10px;\n  border-top: 1px solid #eee;\n}\n\n.send-button {\n  text-align: right;\n  margin-top: 10px;\n}\n\n.no-selection {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n  font-size: 18px;\n}\n</style>"],"mappings":"AAmGA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,QAAA;MACAC,iBAAA;MACAC,QAAA;MACAC,YAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,YAAA;IACA,KAAAC,aAAA;EACA;EACAC,cAAA;IACA,SAAAJ,MAAA;MACA,KAAAA,MAAA,CAAAK,KAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAC,MAAA,CAAAC,OAAA,CAAAF,UAAA;IACA;IACAG,YAAA;MACA,YAAAF,MAAA,CAAAC,OAAA,CAAAC,WAAA;IACA;IACAC,gBAAA;MACA,YAAAf,QAAA,CAAAgB,IAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAC,EAAA,UAAAjB,iBAAA;IACA;EACA;EACAkB,OAAA;IACAb,aAAA;MACA;MACA,KAAAc,MAAA,CAAAC,GAAA,uBACAC,IAAA,CAAAC,QAAA;QACA,KAAAvB,QAAA,GAAAuB,QAAA,CAAAzB,IAAA;MACA,GACA0B,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,aAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACAlB,cAAA;MACA;MACA,MAAAqB,UAAA,GAAAC,MAAA,CAAAC,QAAA,CAAAC,QAAA;MACA,MAAAC,KAAA,MAAAJ,UAAA,KAAAC,MAAA,CAAAC,QAAA,CAAAG,IAAA;MACA,KAAA7B,MAAA,OAAA8B,SAAA,CAAAF,KAAA;;MAEA;MACA,KAAA5B,MAAA,CAAA+B,MAAA;QACAT,OAAA,CAAAU,GAAA;MACA;;MAEA;MACA,KAAAhC,MAAA,CAAAiC,SAAA,GAAAC,KAAA;QACA,MAAAC,OAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,KAAA,CAAAxC,IAAA;QACA;QACA,SAAAG,iBAAA,KAAAsC,OAAA,CAAAG,SAAA;UACA,KAAAxC,QAAA,CAAAyC,IAAA,CAAAJ,OAAA;QACA;UACA;UACA,MAAAtB,OAAA,QAAAjB,QAAA,CAAAgB,IAAA,CAAA4B,CAAA,IAAAA,CAAA,CAAA1B,EAAA,KAAAqB,OAAA,CAAAG,SAAA;UACA,IAAAzB,OAAA;YACAA,OAAA,CAAA4B,WAAA,IAAA5B,OAAA,CAAA4B,WAAA;YACA5B,OAAA,CAAA6B,WAAA,GAAAP,OAAA,CAAAQ,OAAA;YACA9B,OAAA,CAAA+B,IAAA,OAAAC,IAAA,GAAAC,kBAAA;cAAAC,IAAA;cAAAC,MAAA;YAAA;UACA;QACA;MACA;;MAEA;MACA,KAAAhD,MAAA,CAAAiD,OAAA;QACA3B,OAAA,CAAAU,GAAA;QACA;QACAkB,UAAA,YAAA/C,aAAA;MACA;;MAEA;MACA,KAAAH,MAAA,CAAAmD,OAAA,GAAA9B,KAAA;QACAC,OAAA,CAAAD,KAAA,iBAAAA,KAAA;MACA;IACA;IACA+B,aAAAC,GAAA;MACA,QAAAA,GAAA;QACA;UACA,KAAAC,OAAA,CAAAf,IAAA;UACA;QACA;UAAA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA,KAAAe,OAAA,CAAAf,IAAA;UACA;QACA;UACA;MACA;IACA;IACAgB,OAAA;MACA,KAAA/C,MAAA,CAAAgD,QAAA;MACA,KAAAjC,QAAA,CAAAkC,OAAA;MACA,KAAAH,OAAA,CAAAf,IAAA;IACA;IACAmB,cAAA5C,EAAA;MACA,KAAAjB,iBAAA,GAAAiB,EAAA;MACA;MACA,KAAA6C,YAAA,CAAA7C,EAAA;MACA;MACA,MAAAD,OAAA,QAAAjB,QAAA,CAAAgB,IAAA,CAAA4B,CAAA,IAAAA,CAAA,CAAA1B,EAAA,KAAAA,EAAA;MACA,IAAAD,OAAA;QACAA,OAAA,CAAA4B,WAAA;MACA;IACA;IACAkB,aAAArB,SAAA;MACA;MACA,KAAAtB,MAAA,CAAAC,GAAA,sBAAAqB,SAAA,IACApB,IAAA,CAAAC,QAAA;QACA,KAAArB,QAAA,GAAAqB,QAAA,CAAAzB,IAAA;MACA,GACA0B,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACAuC,YAAA;MACA,UAAA7D,YAAA,CAAA8D,IAAA;MACA,MAAAC,UAAA;QACAhD,EAAA,OAAAhB,QAAA,CAAAiE,MAAA;QACApB,OAAA,OAAA5C,YAAA;QACAiE,MAAA;QACApB,IAAA,MAAAC,IAAA,GAAAC,kBAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QACAV,SAAA,OAAAzC;MACA;MACA,KAAAC,QAAA,CAAAyC,IAAA,CAAAuB,UAAA;MACA,KAAA/D,YAAA;;MAEA;MACA,SAAAC,MAAA,SAAAA,MAAA,CAAAiE,UAAA,KAAAnC,SAAA,CAAAoC,IAAA;QACA,KAAAlE,MAAA,CAAAmE,IAAA,CAAA/B,IAAA,CAAAgC,SAAA,CAAAN,UAAA;MACA;QACA,KAAAvC,QAAA,CAAAF,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}