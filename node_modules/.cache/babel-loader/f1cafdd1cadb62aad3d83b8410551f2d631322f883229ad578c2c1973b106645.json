{"ast":null,"code":"export default {\n  name: 'JobList',\n  data() {\n    return {\n      jobs: [],\n      activeIndex: '2'\n    };\n  },\n  created() {\n    this.loadJobs();\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    }\n  },\n  methods: {\n    handleSelect(key) {\n      // 避免重复导航到当前路由\n      const currentRoute = this.$router.currentRoute.path;\n      let targetRoute = '';\n      switch (key) {\n        case '1':\n          targetRoute = '/';\n          break;\n        case '9':\n          // 发布职位\n          targetRoute = '/company/PublishJob'; // 跳转到发布职位页面\n          break;\n        case '2':\n          targetRoute = '/jobs';\n          break;\n        case '3':\n          targetRoute = '/companies';\n          break;\n        case '4':\n          targetRoute = '/chat';\n          break;\n        case '5':\n          targetRoute = '/forum';\n          break;\n        case '6':\n          targetRoute = '/login';\n          break;\n        case '7':\n          targetRoute = '/register';\n          break;\n        case '8-1':\n          targetRoute = '/user';\n          break;\n        case '8-2':\n          targetRoute = '/admin';\n          break;\n        default:\n          return;\n      }\n\n      // 只有当目标路由与当前路由不同时才进行导航\n      if (targetRoute && targetRoute !== currentRoute) {\n        this.$router.push(targetRoute);\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    loadJobs() {\n      this.$axios.get('/jobs').then(response => {\n        this.jobs = response.data;\n      }).catch(error => {\n        console.error('获取职位数据失败:', error);\n        this.$message.error('获取职位数据失败，请稍后重试');\n      });\n    },\n    goToJobDetail(jobId) {\n      this.$router.push(`/jobs/${jobId}`);\n    }\n  }\n};","map":{"version":3,"names":["name","data","jobs","activeIndex","created","loadJobs","computed","isLoggedIn","$store","getters","currentUser","methods","handleSelect","key","currentRoute","$router","path","targetRoute","push","logout","dispatch","$message","success","$axios","get","then","response","catch","error","console","goToJobDetail","jobId"],"sources":["src/views/Jobs.vue"],"sourcesContent":["<template>\n  <div class=\"jobs-container\">\n    <!-- 导航栏 -->\n    <el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\n      <!-- 首页 - 始终显示 -->\n      <el-menu-item index=\"1\">首页</el-menu-item>\n      \n      <!-- 发布职位 - 仅企业用户显示 -->\n      <el-menu-item index=\"9\" v-if=\"isLoggedIn && currentUser.role === 1\">发布职位</el-menu-item>\n      \n      <!-- 消息 - 仅登录用户显示 -->\n      <el-menu-item index=\"4\" v-if=\"isLoggedIn\">消息</el-menu-item>\n      \n      <!-- 其他菜单项 - 非企业用户显示 -->\n      <template v-if=\"!isLoggedIn || currentUser.role !== 1\">\n        <el-menu-item index=\"2\">职位</el-menu-item>\n        <el-menu-item index=\"3\">企业</el-menu-item>\n        <el-menu-item index=\"5\" v-if=\"isLoggedIn && currentUser.role === 0\">论坛</el-menu-item>\n        <el-menu-item index=\"6\" v-if=\"!isLoggedIn\">登录</el-menu-item>\n        <el-menu-item index=\"7\" v-if=\"!isLoggedIn\">注册</el-menu-item>\n      </template>\n      \n      <!-- 用户下拉菜单 - 所有登录用户显示 -->\n      <el-submenu index=\"8\" v-if=\"isLoggedIn\">\n        <template slot=\"title\">{{ currentUser.username }}</template>\n        <el-menu-item index=\"8-1\">个人中心</el-menu-item>\n        <el-menu-item index=\"8-2\" v-if=\"currentUser.role === 2\">管理员面板</el-menu-item>\n        <el-menu-item index=\"8-3\" @click=\"logout\">退出登录</el-menu-item>\n      </el-submenu>\n    </el-menu>\n\n    <el-card class=\"jobs-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>全部在招职位</span>\n      </div>\n      <div class=\"jobs-list\">\n        <div\n          v-for=\"job in jobs\"\n          :key=\"job.id\"\n          class=\"job-item\"\n          @click=\"goToJobDetail(job.id)\"\n        >\n          <div class=\"job-company\">{{job.company}}</div>\n          <div class=\"job-title\">{{job.title}}</div>\n          <div class=\"job-info\">\n            <span class=\"job-salary\">{{job.salary}}</span>\n            <span class=\"job-location\">{{job.location}}</span>\n          </div>\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'JobList',\n  data() {\n    return {\n      jobs: [],\n      activeIndex: '2'\n    };\n  },\n  created() {\n    this.loadJobs();\n  },\n  computed: {\n    isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    currentUser() {\n      return this.$store.getters.currentUser;\n    }\n  },\n  methods: {\n    handleSelect(key) {\n      // 避免重复导航到当前路由\n      const currentRoute = this.$router.currentRoute.path;\n      let targetRoute = '';\n      \n      switch(key) {\n        case '1':\n          targetRoute = '/';\n          break;\n        case '9':  // 发布职位\n          targetRoute = '/company/PublishJob';  // 跳转到发布职位页面\n          break;\n        case '2':\n          targetRoute = '/jobs';\n          break;\n        case '3':\n          targetRoute = '/companies';\n          break;\n        case '4':\n          targetRoute = '/chat';\n          break;\n        case '5':\n          targetRoute = '/forum';\n          break;\n        case '6':\n          targetRoute = '/login';\n          break;\n        case '7':\n          targetRoute = '/register';\n          break;\n        case '8-1':\n          targetRoute = '/user';\n          break;\n        case '8-2':\n          targetRoute = '/admin';\n          break;\n        default:\n          return;\n      }\n      \n      // 只有当目标路由与当前路由不同时才进行导航\n      if (targetRoute && targetRoute !== currentRoute) {\n        this.$router.push(targetRoute);\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$message.success('退出登录成功');\n      this.$router.push('/');\n    },\n    loadJobs() {\n      this.$axios.get('/jobs')\n        .then(response => {\n          this.jobs = response.data;\n        })\n        .catch(error => {\n          console.error('获取职位数据失败:', error);\n          this.$message.error('获取职位数据失败，请稍后重试');\n        });\n    },\n    goToJobDetail(jobId) {\n      this.$router.push(`/jobs/${jobId}`);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.jobs-container {\n  background-color: #f5f7fa;\n}\n.jobs-card {\n  width: 100%;\n}\n.jobs-list {\n  padding: 20px 0;\n}\n.job-item {\n  padding: 20px;\n  margin-bottom: 15px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n.job-item:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);\n}\n.job-company {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 5px;\n}\n.job-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n.job-info {\n  display: flex;\n  font-size: 14px;\n}\n.job-salary {\n  color: #ff7e00;\n  margin-right: 20px;\n}\n.job-location {\n  color: #666;\n}\n</style>"],"mappings":"AAuDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,QAAA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAC,MAAA,CAAAC,OAAA,CAAAF,UAAA;IACA;IACAG,YAAA;MACA,YAAAF,MAAA,CAAAC,OAAA,CAAAC,WAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAAC,GAAA;MACA;MACA,MAAAC,YAAA,QAAAC,OAAA,CAAAD,YAAA,CAAAE,IAAA;MACA,IAAAC,WAAA;MAEA,QAAAJ,GAAA;QACA;UACAI,WAAA;UACA;QACA;UAAA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACAA,WAAA;UACA;QACA;UACA;MACA;;MAEA;MACA,IAAAA,WAAA,IAAAA,WAAA,KAAAH,YAAA;QACA,KAAAC,OAAA,CAAAG,IAAA,CAAAD,WAAA;MACA;IACA;IACAE,OAAA;MACA,KAAAX,MAAA,CAAAY,QAAA;MACA,KAAAC,QAAA,CAAAC,OAAA;MACA,KAAAP,OAAA,CAAAG,IAAA;IACA;IACAb,SAAA;MACA,KAAAkB,MAAA,CAAAC,GAAA,UACAC,IAAA,CAAAC,QAAA;QACA,KAAAxB,IAAA,GAAAwB,QAAA,CAAAzB,IAAA;MACA,GACA0B,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAP,QAAA,CAAAO,KAAA;MACA;IACA;IACAE,cAAAC,KAAA;MACA,KAAAhB,OAAA,CAAAG,IAAA,UAAAa,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}